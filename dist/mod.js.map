{"version":3,"file":"mod.js","sources":["../src/_hashids.ts","../src/Path.ts","../src/_separator.ts"],"sourcesContent":["// Copyright (c) 2012-2020 Bazyli Brz√≥ska & Ivan Akimov\n\ntype NumberLike = number | bigint\n\nexport default class Hashids {\n  private alphabet: string[]\n  private seps: string[]\n  private guards: string[]\n  private salt: string[]\n  private guardsRegExp: RegExp\n  private sepsRegExp: RegExp\n  private allowedCharsRegExp: RegExp\n\n  public constructor(\n    salt = '',\n    private minLength = 0,\n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890',\n    seps = 'cfhistuCFHISTU',\n  ) {\n    if (typeof minLength !== 'number') {\n      throw new TypeError(\n        `Hashids: Provided 'minLength' has to be a number (is ${typeof minLength})`,\n      )\n    }\n    if (typeof salt !== 'string') {\n      throw new TypeError(\n        `Hashids: Provided 'salt' has to be a string (is ${typeof salt})`,\n      )\n    }\n    if (typeof alphabet !== 'string') {\n      throw new TypeError(\n        `Hashids: Provided alphabet has to be a string (is ${typeof alphabet})`,\n      )\n    }\n\n    const saltChars = Array.from(salt)\n    const alphabetChars = Array.from(alphabet)\n    const sepsChars = Array.from(seps)\n\n    this.salt = saltChars\n\n    const uniqueAlphabet = keepUnique(alphabetChars)\n\n    if (uniqueAlphabet.length < minAlphabetLength) {\n      throw new Error(\n        `Hashids: alphabet must contain at least ${minAlphabetLength} unique characters, provided: ${uniqueAlphabet}`,\n      )\n    }\n\n    /** `alphabet` should not contains `seps` */\n    this.alphabet = withoutChars(uniqueAlphabet, sepsChars)\n    /** `seps` should contain only characters present in `alphabet` */\n    const filteredSeps = onlyChars(sepsChars, uniqueAlphabet)\n    this.seps = shuffle(filteredSeps, saltChars)\n\n    let sepsLength\n    let diff\n\n    if (\n      this.seps.length === 0 ||\n      this.alphabet.length / this.seps.length > sepDiv\n    ) {\n      sepsLength = Math.ceil(this.alphabet.length / sepDiv)\n\n      if (sepsLength > this.seps.length) {\n        diff = sepsLength - this.seps.length\n        this.seps.push(...this.alphabet.slice(0, diff))\n        this.alphabet = this.alphabet.slice(diff)\n      }\n    }\n\n    this.alphabet = shuffle(this.alphabet, saltChars)\n    const guardCount = Math.ceil(this.alphabet.length / guardDiv)\n\n    if (this.alphabet.length < 3) {\n      this.guards = this.seps.slice(0, guardCount)\n      this.seps = this.seps.slice(guardCount)\n    } else {\n      this.guards = this.alphabet.slice(0, guardCount)\n      this.alphabet = this.alphabet.slice(guardCount)\n    }\n\n    this.guardsRegExp = makeAnyOfCharsRegExp(this.guards)\n    this.sepsRegExp = makeAnyOfCharsRegExp(this.seps)\n    this.allowedCharsRegExp = makeAtLeastSomeCharRegExp([\n      ...this.alphabet,\n      ...this.guards,\n      ...this.seps,\n    ])\n  }\n\n  public encode(numbers: string): string\n  public encode(numbers: NumberLike[]): string\n  public encode(...numbers: NumberLike[]): string\n  public encode(numbers: string[]): string\n  public encode(...numbers: string[]): string\n  public encode<T extends string | NumberLike>(\n    first: T[] | T,\n    ...numbers: T[]\n  ): string {\n    const ret = ''\n\n    if (Array.isArray(first)) {\n      numbers = first\n    } else {\n      // eslint-disable-next-line eqeqeq\n      numbers = [...(first != null ? [first] : []), ...numbers]\n    }\n\n    if (!numbers.length) {\n      return ret\n    }\n\n    if (!numbers.every(isIntegerNumber)) {\n      numbers = numbers.map((n) =>\n        typeof n === 'bigint' || typeof n === 'number'\n          ? n\n          : safeParseInt10(String(n)),\n      ) as T[]\n    }\n\n    if (!(numbers as NumberLike[]).every(isPositiveAndFinite)) {\n      return ret\n    }\n\n    return this._encode(numbers as number[]).join('')\n  }\n\n  public decode(id: string): NumberLike[] {\n    if (!id || typeof id !== 'string' || id.length === 0) return []\n    return this._decode(id)\n  }\n\n  /**\n   * @description Splits a hex string into groups of 12-digit hexadecimal numbers,\n   * then prefixes each with '1' and encodes the resulting array of numbers\n   *\n   * Encoding '00000000000f00000000000f000f' would be the equivalent of:\n   * Hashids.encode([0x100000000000f, 0x100000000000f, 0x1000f])\n   *\n   * This means that if your environment supports BigInts,\n   * you will get different (shorter) results if you provide\n   * a BigInt representation of your hex and use `encode` directly, e.g.:\n   * Hashids.encode(BigInt(`0x${hex}`))\n   *\n   * To decode such a representation back to a hex string, use the following snippet:\n   * Hashids.decode(id)[0].toString(16)\n   */\n  public encodeHex(hex: string | bigint): string {\n    switch (typeof hex) {\n      case 'bigint':\n        hex = hex.toString(16)\n        break\n      case 'string':\n        if (!/^[0-9a-fA-F]+$/.test(hex)) return ''\n        break\n      default:\n        throw new Error(\n          `Hashids: The provided value is neither a string, nor a BigInt (got: ${typeof hex})`,\n        )\n    }\n\n    const numbers = splitAtIntervalAndMap(hex, 12, (part) =>\n      parseInt(`1${part}`, 16),\n    )\n    return this.encode(numbers)\n  }\n\n  public decodeHex(id: string) {\n    return this.decode(id)\n      .map((number) => number.toString(16).slice(1))\n      .join('')\n  }\n\n  private _encode(numbers: NumberLike[]): string[] {\n    let alphabet = this.alphabet\n\n    const numbersIdInt = numbers.reduce<number>(\n      (last, number, i) =>\n        last +\n        (typeof number === 'bigint'\n          ? Number(number % BigInt(i + 100))\n          : number % (i + 100)),\n      0,\n    )\n\n    let ret: string[] = [alphabet[numbersIdInt % alphabet.length]]\n    const lottery = ret.slice()\n\n    const seps = this.seps\n    const guards = this.guards\n\n    numbers.forEach((number, i) => {\n      const buffer = lottery.concat(this.salt, alphabet)\n\n      alphabet = shuffle(alphabet, buffer)\n      const last = toAlphabet(number, alphabet)\n\n      ret.push(...last)\n\n      if (i + 1 < numbers.length) {\n        const charCode = last[0].codePointAt(0)! + i\n        const extraNumber =\n          typeof number === 'bigint'\n            ? Number(number % BigInt(charCode))\n            : number % charCode\n        ret.push(seps[extraNumber % seps.length])\n      }\n    })\n\n    if (ret.length < this.minLength) {\n      const prefixGuardIndex =\n        (numbersIdInt + ret[0].codePointAt(0)!) % guards.length\n      ret.unshift(guards[prefixGuardIndex])\n\n      if (ret.length < this.minLength) {\n        const suffixGuardIndex =\n          (numbersIdInt + ret[2].codePointAt(0)!) % guards.length\n        ret.push(guards[suffixGuardIndex])\n      }\n    }\n\n    const halfLength = Math.floor(alphabet.length / 2)\n    while (ret.length < this.minLength) {\n      alphabet = shuffle(alphabet, alphabet)\n      ret.unshift(...alphabet.slice(halfLength))\n      ret.push(...alphabet.slice(0, halfLength))\n\n      const excess = ret.length - this.minLength\n      if (excess > 0) {\n        const halfOfExcess = excess / 2\n        ret = ret.slice(halfOfExcess, halfOfExcess + this.minLength)\n      }\n    }\n\n    return ret\n  }\n\n  public isValidId(id: string): boolean {\n    return this.allowedCharsRegExp.test(id)\n  }\n\n  private _decode(id: string): NumberLike[] {\n    if (!this.isValidId(id)) {\n      throw new Error(\n        `The provided ID (${id}) is invalid, as it contains characters that do not exist in the alphabet (${this.guards.join(\n          '',\n        )}${this.seps.join('')}${this.alphabet.join('')})`,\n      )\n    }\n    const idGuardsArray = id.split(this.guardsRegExp)\n    const splitIndex =\n      idGuardsArray.length === 3 || idGuardsArray.length === 2 ? 1 : 0\n\n    const idBreakdown = idGuardsArray[splitIndex]\n    if (idBreakdown.length === 0) return []\n\n    const lotteryChar = idBreakdown[Symbol.iterator]().next().value as string\n    const idArray = idBreakdown.slice(lotteryChar.length).split(this.sepsRegExp)\n\n    let lastAlphabet: string[] = this.alphabet\n    const result: NumberLike[] = []\n\n    for (const subId of idArray) {\n      const buffer = [lotteryChar, ...this.salt, ...lastAlphabet]\n      const nextAlphabet = shuffle(\n        lastAlphabet,\n        buffer.slice(0, lastAlphabet.length),\n      )\n      result.push(fromAlphabet(Array.from(subId), nextAlphabet))\n      lastAlphabet = nextAlphabet\n    }\n\n    // if the result is different from what we'd expect, we return an empty result (malformed input):\n    if (this._encode(result).join('') !== id) return []\n    return result\n  }\n}\n\nconst minAlphabetLength = 16\nconst sepDiv = 3.5\nconst guardDiv = 12\n\nexport const keepUnique = <T>(content: Iterable<T>): T[] =>\n  Array.from(new Set(content))\n\nexport const withoutChars = (\n  chars: string[],\n  withoutChars: string[],\n): string[] => chars.filter((char) => !withoutChars.includes(char))\n\nexport const onlyChars = (chars: string[], keepChars: string[]): string[] =>\n  chars.filter((char) => keepChars.includes(char))\n\nconst isIntegerNumber = (n: NumberLike | string) =>\n  typeof n === 'bigint' ||\n  (!Number.isNaN(Number(n)) && Math.floor(Number(n)) === n)\n\nconst isPositiveAndFinite = (n: NumberLike) =>\n  typeof n === 'bigint' || (n >= 0 && Number.isSafeInteger(n))\n\nfunction shuffle(alphabetChars: string[], saltChars: string[]): string[] {\n  if (saltChars.length === 0) {\n    return alphabetChars\n  }\n\n  let integer: number\n  const transformed = alphabetChars.slice()\n\n  for (let i = transformed.length - 1, v = 0, p = 0; i > 0; i--, v++) {\n    v %= saltChars.length\n    p += integer = saltChars[v].codePointAt(0)!\n    const j = (integer + v + p) % i\n\n    // swap characters at positions i and j\n    const a = transformed[i]\n    const b = transformed[j]\n    transformed[j] = a\n    transformed[i] = b\n  }\n\n  return transformed\n}\n\nconst toAlphabet = (input: NumberLike, alphabetChars: string[]): string[] => {\n  const id: string[] = []\n\n  if (typeof input === 'bigint') {\n    const alphabetLength = BigInt(alphabetChars.length)\n    do {\n      id.unshift(alphabetChars[Number(input % alphabetLength)])\n      input = input / alphabetLength\n    } while (input > BigInt(0))\n  } else {\n    do {\n      id.unshift(alphabetChars[input % alphabetChars.length])\n      input = Math.floor(input / alphabetChars.length)\n    } while (input > 0)\n  }\n\n  return id\n}\n\nconst fromAlphabet = (\n  inputChars: string[],\n  alphabetChars: string[],\n): NumberLike =>\n  inputChars.reduce((carry, item) => {\n    const index = alphabetChars.indexOf(item)\n    if (index === -1) {\n      throw new Error(\n        `The provided ID (${inputChars.join(\n          '',\n        )}) is invalid, as it contains characters that do not exist in the alphabet (${alphabetChars.join(\n          '',\n        )})`,\n      )\n    }\n    if (typeof carry === 'bigint') {\n      return carry * BigInt(alphabetChars.length) + BigInt(index)\n    }\n    const value = carry * alphabetChars.length + index\n    const isSafeValue = Number.isSafeInteger(value)\n    if (isSafeValue) {\n      return value\n    } else {\n      if (typeof BigInt === 'function') {\n        return BigInt(carry) * BigInt(alphabetChars.length) + BigInt(index)\n      } else {\n        // we do not have support for BigInt:\n        throw new Error(\n          `Unable to decode the provided string, due to lack of support for BigInt numbers in the current environment`,\n        )\n      }\n    }\n  }, 0 as NumberLike)\n\nconst safeToParseNumberRegExp = /^\\+?[0-9]+$/\nconst safeParseInt10 = (str: string) =>\n  safeToParseNumberRegExp.test(str) ? parseInt(str, 10) : NaN\n\nconst splitAtIntervalAndMap = <T>(\n  str: string,\n  nth: number,\n  map: (n: string) => T,\n): T[] =>\n  Array.from<never, T>({length: Math.ceil(str.length / nth)}, (_, index) =>\n    map(str.slice(index * nth, (index + 1) * nth)),\n  )\n\nconst makeAnyOfCharsRegExp = (chars: string[]) =>\n  new RegExp(\n    chars\n      .map((char) => escapeRegExp(char))\n      // we need to sort these from longest to shortest,\n      // as they may contain multibyte unicode characters (these should come first)\n      .sort((a, b) => b.length - a.length)\n      .join('|'),\n  )\n\nconst makeAtLeastSomeCharRegExp = (chars: string[]) =>\n  new RegExp(\n    `^[${chars\n      .map((char) => escapeRegExp(char))\n      // we need to sort these from longest to shortest,\n      // as they may contain multibyte unicode characters (these should come first)\n      .sort((a, b) => b.length - a.length)\n      .join('')}]+$`,\n  )\n\nconst escapeRegExp = (text: string) =>\n  text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n","// Copyright 2020 Matheus Xavier all rights reserved. MIT licensed\nimport { _determineSeparators } from \"./_separator.ts\";\nimport Hashids from \"./_hashids.ts\";\n\n/** unix style separators constant */\nexport const UNIX_SEPS = [\"/\"];\n/** @deprecated will be removed on 3.0.0 in favor of UNIX_SEPS*/\nexport const LINUX_SEPS = UNIX_SEPS;\n/** windows style separators constant */\nexport const WINDOWS_SEPS = [\"\\\\\", \"/\"];\n\n/**\n * this class represents a filesystem path, and allows for easy manipulation of said path\n */\nexport class Path {\n  private pathElements: string[];\n  private separators: string[];\n  public trailingSlash: boolean = false;\n\n  /**\n   * construct a path object already with a path or empty\n   * @param path initialize this instance with a path if passed\n   * @param separators not needed most of the time, allows for overriding of the separators\n   * separators are an array where the 0th element is the preferred separator\n   */\n  constructor(path?: string, separators?: string[]) {\n    this.separators = separators || _determineSeparators();\n    if (path) {\n      this.trailingSlash = path[0] === \"/\";\n      this.pathElements = Path.explodePath(this.separators, path);\n    } else {\n      this.pathElements = new Array<string>();\n    }\n  }\n\n  /**\n   * explodes a string into an array of strings\n   * @param separators a list of valid separators for the host system\n   * @param pathString the path to be exploded as a string\n   */\n  private static explodePath(\n    separators: string[],\n    pathString: string,\n  ): string[] {\n    const exploded = pathString.split(\"\");\n    const pathElements = new Array<string>();\n    let currentElement = \"\";\n    for (let charAt = 0; charAt < exploded.length; charAt++) {\n      let char = exploded[charAt];\n      if (separators.indexOf(char) === -1) {\n        currentElement = currentElement + char;\n      } else {\n        if (currentElement) {\n          pathElements.push(currentElement);\n          currentElement = \"\";\n        }\n      }\n    }\n    pathElements.push(currentElement);\n    return pathElements;\n  }\n\n  /**\n   * render this path object as a string\n   * @return the stored path structure as a string\n   * using the preferred system separator.\n   */\n  public toString(prefix: string = \"\", suffix: string = \"\", separator?: string): string {\n    let path = this.pathElements.join(separator || this.separators[0]);\n    path = prefix.concat(path.concat(suffix));\n    return this.trailingSlash ? \"/\".concat(path) : path;\n  }\n\n  /**\n   * push a path fragment onto the end of this Path\n   * @param e a string denoting a Path fragment\n   */\n  public push(e: string): Path {\n    let pe = Path.explodePath(this.separatorList, e);\n    pe.forEach((e) => this.pathElements.push(e));\n    return this;\n  }\n\n  /**\n   * removes an element from the end of this path and returns the path to allow for chaining\n   * @deprecated the naming on this method is unfortunate and it's considered deprecated in favor of `del`\n   */\n  public pop(): Path {\n    return this.del();\n  }\n\n  /**\n   * removes an element from the end of this path and returns the path to allow for chaining\n   */\n  public del(): Path {\n    this.pathElements.pop();\n    return this;\n  }\n\n  /**\n   * finds the first valid node walking a path from the right\n   * @param ignoreFiles if set files will be ignored on the resolution\n   * @returns a new Path object with a Path object until the valid node\n   */\n  public findLastValidNode(ignoreFiles?: boolean): Path {\n    let strRepr = this.toString();\n    const np = new Path(strRepr);\n    if (ignoreFiles) {\n      while (!np.exists && !np.isFile) {\n        np.del();\n      }\n    } else {\n      while (!np.exists) {\n        np.del();\n      }\n    }\n    return np;\n  }\n\n  /**\n   * takes the diff between Path x and Path y\n   * @param x \n   * @param y\n   * @returns elements in x but not in y\n   */\n  public static diff(x: Path, y: Path): string[] {\n    const xRepr = x.elements;\n    const yRepr = y.elements;\n    let res = xRepr.filter((e) => {\n      return yRepr.indexOf(e) === -1;\n    });\n    return res;\n  }\n\n  /**\n   * returns the extension or null the dot will not be stripped\n   * dotfiles are considered extensionless\n   */\n  get ext(): string | null {\n    const lastElem = this.pathElements[this.pathElements.length - 1];\n    const dotIndex = lastElem.split(\"\").lastIndexOf(\".\");\n    if (dotIndex !== 0 && dotIndex !== -1) {\n      return lastElem.substr(dotIndex);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Checks if the path exists\n   * ```ts\n   * const path = new Path(\"/home/test/text.txt\");\n   * path.exists;\n   * ```\n   * requires: --allow-read flag\n   */\n  get exists(): boolean {\n    try {\n      Deno.statSync(this.toString());\n      return true;\n    } catch (e) {\n      // do not hide permission errors from the user\n      if (e instanceof Deno.errors.PermissionDenied) {\n        throw e;\n      }\n      return false;\n    }\n  }\n\n  get isFile(): boolean {\n    try {\n      return Deno.statSync(this.toString()).isFile;\n    } catch (e) {\n      // do not hide permission errors from the user\n      if (e instanceof Deno.errors.PermissionDenied) {\n        throw e;\n      }\n      return false;\n    }\n  }\n\n  get isDir(): boolean {\n    try {\n      return Deno.statSync(this.toString()).isDirectory;\n    } catch (e) {\n      // do not hide permission errors from the user\n      if (e instanceof Deno.errors.PermissionDenied) {\n        throw e;\n      }\n      return false;\n    }\n  }\n\n  get isSymlink(): boolean {\n    try {\n      return Deno.statSync(this.toString()).isSymlink;\n    } catch (e) {\n      // do not hide permission errors from the user\n      if (e instanceof Deno.errors.PermissionDenied) {\n        throw e;\n      }\n      return false;\n    }\n  }\n\n  /**\n   * request the inner representation of the path inside the class\n   */\n  get elements(): string[] {\n    return this.pathElements;\n  }\n\n  /**\n   * set the inner representation of the path inside the class\n   */\n  set elements(e: string[]) {\n    this.pathElements = e;\n  }\n\n  set separatorList(sl: string[]) {\n    this.separators = sl;\n  }\n\n  get separatorList(): string[] {\n    return this.separators;\n  }\n\n  public static fromCWD(): Path {\n    return new Path(Deno.cwd());\n  }\n\n  /**\n   * create the specified path if parents is true any needed paths will be created\n   * @param path the desired path\n   * @param parents whether or not to create the structure needed to achieve the final path\n   * @returns `true` on success and `false` on failure\n   * \n   */\n  public mkDirSync(parents: boolean = false): boolean {\n    if (!parents) {\n      Deno.mkdirSync(this.toString());\n    }\n    // if the path already exists and is a dir there is nothing to do\n    if (this.exists && this.isDir) {\n      return true;\n    }\n    // find the last part of the path that is valid\n    let vp = this.findLastValidNode();\n    // take the diff between the valid path and the desired path\n    let needs = Path.diff(this, vp);\n    // create the needed paths\n    for (let i = 0; i < needs.length; i++) {\n      vp.push(needs[i]);\n      Deno.mkdirSync(vp.toString());\n    }\n    return true;\n  }\n\n  public async mkDir(parents: boolean = false): Promise<boolean> {\n    if (!parents) {\n      await Deno.mkdir(this.toString());\n    }\n    // if the path already exists and is a dir there is nothing to do\n    if (this.exists && this.isDir) {\n      return true;\n    }\n    // find the last part of the path that is valid\n    let vp = this.findLastValidNode();\n    // take the diff between the valid path and the desired path\n    let needs = Path.diff(this, vp);\n    // create the needed paths\n    for (let i = 0; i < needs.length; i++) {\n      vp.push(needs[i]);\n      await Deno.mkdir(vp.toString());\n    }\n    return true;\n  }\n\n  /**\n   * remove self\n   * @return true if success false otherwise\n   */\n  public async rm(recursive: boolean = false): Promise<void> {\n    await Deno.remove(this.toString(), { recursive });\n    return;\n  }\n\n\n  /**\n   * remove self sync\n   * @return true if success false otherwise\n   */\n  public rmSync(recursive: boolean = false): void {\n    Deno.removeSync(this.toString(), { recursive });\n  }\n\n\n  /**\n   * Generate a new random folder name with it's path set to the system temporary folder\n   * @param rngScalar \n   * @param prefix \n   * @param suffix \n   * @param joinChar \n   * @deprecated slated for removal on v3.0.0\n   */\n  public static genTmpPath(\n    rngScalar: number = 4096,\n    prefix: string = \"\",\n    suffix: string = \"\",\n    joinChar: string = \".\",\n    tmpDir?: string\n  ): Path {\n    return Path.makeTmpDir({ rngScalar, prefix, suffix, joinChar, tmpDir });\n  }\n\n\n  public static getTmpPath(): Path {\n    let tempPath: string | undefined;\n    switch (Deno.build.os) {\n      case \"windows\":\n        tempPath = Deno.env.get(\"TMP\") || Deno.env.get(\"TEMP\");\n        break;\n      case \"darwin\":\n      case \"linux\":\n        tempPath = Deno.env.get(\"TMPDIR\") || \"/tmp\";\n        break;\n      default:\n        throw new Error(\"could not determine the system's temporary folder path, you can try specifying a tmpDir param\");\n    }\n    return new Path(tempPath);\n  }\n\n\n  /**\n   * Generate a new random folder name with it's path set to the system temporary folder\n   * @param rngScalar \n   * @param prefix \n   * @param suffix \n   * @param joinChar \n   */\n  public static makeTmpDir(\n    { rngScalar = 4096, prefix = \"\", suffix = \"\", joinChar = \".\", tmpDir }: { rngScalar?: number; prefix?: string; suffix?: string; joinChar?: string; tmpDir?: string; } = {}): Path {\n    const rn = Math.floor(Math.random() * rngScalar);\n    const hsi = new Hashids(rn.toString(), 10);\n    let pt;\n    prefix = prefix ? prefix + joinChar : \"\";\n    suffix = suffix ? joinChar + suffix : \"\";\n    if (!tmpDir) {\n      pt = Path.getTmpPath();\n    } else {\n      pt = new Path(tmpDir);\n    }\n    return pt.push(prefix + hsi.encode(rn) + suffix);\n  }\n}\n","// Copyright 2020 Matheus Xavier all rights reserved. MIT licensed\n\nexport function _determineSeparators(): string[] {\n  switch (Deno.build.os) {\n    case \"linux\":\n    case \"darwin\":\n      return [\"/\"];\n      break;\n    case \"windows\":\n      // windows can have either / or \\ as path separators so we account for that\n      // also takes into account window's preference for \\\n      return [\"\\\\\", \"/\"];\n      break;\n    default:\n      throw Error(\"unexpected platform\");\n  }\n}\n"],"names":["Hashids","[object Object]","salt","minLength","alphabet","seps","this","TypeError","saltChars","Array","from","alphabetChars","sepsChars","uniqueAlphabet","keepUnique","length","minAlphabetLength","Error","withoutChars","filteredSeps","onlyChars","sepsLength","diff","shuffle","sepDiv","Math","ceil","push","slice","guardCount","guardDiv","guards","guardsRegExp","makeAnyOfCharsRegExp","sepsRegExp","allowedCharsRegExp","makeAtLeastSomeCharRegExp","first","numbers","isArray","every","isIntegerNumber","map","n","safeParseInt10","String","isPositiveAndFinite","_encode","join","id","_decode","hex","toString","test","splitAtIntervalAndMap","part","parseInt","encode","decode","number","numbersIdInt","reduce","last","i","Number","BigInt","ret","lottery","forEach","buffer","concat","toAlphabet","charCode","codePointAt","extraNumber","prefixGuardIndex","unshift","suffixGuardIndex","halfLength","floor","excess","halfOfExcess","isValidId","idGuardsArray","split","idBreakdown","lotteryChar","Symbol","iterator","next","value","idArray","lastAlphabet","result","subId","nextAlphabet","fromAlphabet","content","Set","chars","filter","char","includes","keepChars","isNaN","isSafeInteger","integer","transformed","v","p","j","a","b","input","alphabetLength","inputChars","carry","item","index","indexOf","safeToParseNumberRegExp","str","NaN","nth","_","RegExp","escapeRegExp","sort","text","replace","UNIX_SEPS","LINUX_SEPS","WINDOWS_SEPS","Path","path","separators","Deno","build","os","_determineSeparators","trailingSlash","pathElements","explodePath","pathString","exploded","currentElement","charAt","prefix","suffix","separator","e","separatorList","del","pop","ignoreFiles","strRepr","np","exists","isFile","x","y","xRepr","elements","yRepr","ext","lastElem","dotIndex","lastIndexOf","substr","statSync","errors","PermissionDenied","isDir","isDirectory","isSymlink","sl","cwd","parents","mkdirSync","vp","findLastValidNode","needs","mkdir","recursive","remove","removeSync","rngScalar","joinChar","tmpDir","makeTmpDir","tempPath","env","get","rn","random","hsi","pt","getTmpPath"],"mappings":"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"}